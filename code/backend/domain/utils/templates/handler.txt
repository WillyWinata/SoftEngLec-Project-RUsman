package handlers

import (
	"net/http"
	"strconv"

	"github.com/WillyWinata/WebDevelopment-Personal/backend/application/services"
	"github.com/WillyWinata/WebDevelopment-Personal/backend/domain/entities"
	"github.com/gin-gonic/gin"
)

/*
    TODO: Copy the code below to route.go

    {{EntityNameLower}}Handler := handlers.New{{EntityNameUpper}}Handler()
    r.POST("/create-{{EntityNameKebab}}", {{EntityNameLower}}Handler.Create)
    r.GET("/get-{{EntityNameKebab}}/:id", {{EntityNameLower}}Handler.Get)
    r.GET("/get-{{EntityNameKebab}}s", {{EntityNameLower}}Handler.GetAll)
    r.PUT("/update-{{EntityNameKebab}}/:id", {{EntityNameLower}}Handler.Update)
    r.DELETE("/delete-{{EntityNameKebab}}/:id", {{EntityNameLower}}Handler.Delete)
*/

type {{EntityNameUpper}}Handler interface {
	Create(c *gin.Context)
	Get(c *gin.Context)
	GetAll(c *gin.Context)
	Update(c *gin.Context)
	Delete(c *gin.Context)
}

type {{EntityNameLower}}Handler struct {
	service services.{{EntityNameUpper}}Service
}

func New{{EntityNameUpper}}Handler() {{EntityNameUpper}}Handler {
	return &{{EntityNameLower}}Handler{
		service: services.New{{EntityNameUpper}}Service(),
	}
}

func (h *{{EntityNameLower}}Handler) Create(c *gin.Context) {
	var {{EntityNameUpper}} entities.{{EntityNameUpper}}

	if err := c.ShouldBindJSON(&{{EntityNameUpper}}); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	if err := h.service.CreateNew{{EntityNameUpper}}({{EntityNameUpper}}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "{{EntityNameUpper}} created"})
}

func (h *{{EntityNameLower}}Handler) Get(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))

	{{EntityNameUpper}}, err := h.service.Get{{EntityNameUpper}}ByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "{{EntityNameUpper}} not found"})
		return
	}

	c.JSON(http.StatusOK, {{EntityNameUpper}})
}

func (h *{{EntityNameLower}}Handler) GetAll(c *gin.Context) {
	{{EntityNameUpper}}s, err := h.service.GetAll{{EntityNameUpper}}s()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Something went wrong"})
		return
	}

	c.JSON(http.StatusOK, {{EntityNameUpper}}s)
}

func (h *{{EntityNameLower}}Handler) Update(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var {{EntityNameUpper}} entities.{{EntityNameUpper}}

	if err := c.ShouldBindJSON(&{{EntityNameUpper}}); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	{{EntityNameUpper}}.Id = uint(id)
	if err := h.service.Update{{EntityNameUpper}}({{EntityNameUpper}}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "{{EntityNameUpper}} updated"})
}

func (h *{{EntityNameLower}}Handler) Delete(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))

	if err := h.service.Delete{{EntityNameUpper}}(id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "{{EntityNameUpper}} deleted"})
}

